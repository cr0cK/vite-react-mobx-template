/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../../routes/__root'
import { Route as AuthImport } from './../../routes/auth'
import { Route as AppImport } from './../../routes/app'
import { Route as IndexImport } from './../../routes/index'
import { Route as AppHomeImport } from './../../routes/app.home'

// Create Virtual Routes

const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AppUsersManagementLazyImport = createFileRoute('/app/users-management')()
const AppAboutLazyImport = createFileRoute('/app/about')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./../../routes/auth.login.lazy').then((d) => d.Route),
)

const AppUsersManagementLazyRoute = AppUsersManagementLazyImport.update({
  id: '/users-management',
  path: '/users-management',
  getParentRoute: () => AppRoute,
} as any).lazy(() =>
  import('./../../routes/app.users-management.lazy').then((d) => d.Route),
)

const AppAboutLazyRoute = AppAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AppRoute,
} as any).lazy(() =>
  import('./../../routes/app.about.lazy').then((d) => d.Route),
)

const AppHomeRoute = AppHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/app/home': {
      id: '/app/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppHomeImport
      parentRoute: typeof AppImport
    }
    '/app/about': {
      id: '/app/about'
      path: '/about'
      fullPath: '/app/about'
      preLoaderRoute: typeof AppAboutLazyImport
      parentRoute: typeof AppImport
    }
    '/app/users-management': {
      id: '/app/users-management'
      path: '/users-management'
      fullPath: '/app/users-management'
      preLoaderRoute: typeof AppUsersManagementLazyImport
      parentRoute: typeof AppImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppAboutLazyRoute: typeof AppAboutLazyRoute
  AppUsersManagementLazyRoute: typeof AppUsersManagementLazyRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppAboutLazyRoute: AppAboutLazyRoute,
  AppUsersManagementLazyRoute: AppUsersManagementLazyRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginLazyRoute: AuthLoginLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/about': typeof AppAboutLazyRoute
  '/app/users-management': typeof AppUsersManagementLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/about': typeof AppAboutLazyRoute
  '/app/users-management': typeof AppUsersManagementLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/about': typeof AppAboutLazyRoute
  '/app/users-management': typeof AppUsersManagementLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/app/home'
    | '/app/about'
    | '/app/users-management'
    | '/auth/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/auth'
    | '/app/home'
    | '/app/about'
    | '/app/users-management'
    | '/auth/login'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/app/home'
    | '/app/about'
    | '/app/users-management'
    | '/auth/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/home",
        "/app/about",
        "/app/users-management"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login"
      ]
    },
    "/app/home": {
      "filePath": "app.home.tsx",
      "parent": "/app"
    },
    "/app/about": {
      "filePath": "app.about.lazy.tsx",
      "parent": "/app"
    },
    "/app/users-management": {
      "filePath": "app.users-management.lazy.tsx",
      "parent": "/app"
    },
    "/auth/login": {
      "filePath": "auth.login.lazy.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
